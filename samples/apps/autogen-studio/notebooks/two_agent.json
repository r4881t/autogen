{
    "user_id": "guestuser@gmail.com",
    "name": "Default Workflow",
    "type": "autonomous",
    "sample_tasks": [
        "paint a picture of a glass of ethiopian coffee, freshly brewed in a tall glass cup, on a table right in front of a lush green forest scenery",
        "Plot the stock price of NVIDIA YTD."
    ],
    "version": "0.0.1",
    "description": "Default workflow",
    "summary_method": "last",
    "agents": [
        {
            "agent": {
                "version": "0.0.1",
                "config": {
                    "name": "user_proxy",
                    "human_input_mode": "NEVER",
                    "max_consecutive_auto_reply": 25,
                    "system_message": "You are a helpful assistant",
                    "is_termination_msg": null,
                    "code_execution_config": "local",
                    "default_auto_reply": "TERMINATE",
                    "description": "User Proxy Agent Configuration",
                    "llm_config": false,
                    "admin_name": "Admin",
                    "messages": [],
                    "max_round": 100,
                    "speaker_selection_method": "auto",
                    "allow_repeat_speaker": true
                },
                "user_id": "guestuser@gmail.com",
                "type": "userproxy",
                "task_instruction": null,
                "skills": [],
                "models": [],
                "agents": []
            },
            "link": {
                "agent_id": 52,
                "workflow_id": 19,
                "agent_type": "sender",
                "sequence_id": 0
            }
        },
        {
            "agent": {
                "version": "0.0.1",
                "config": {
                    "name": "default_assistant",
                    "human_input_mode": "NEVER",
                    "max_consecutive_auto_reply": 25,
                    "system_message": "You are a helpful AI assistant.\nSolve tasks using your coding and language skills.\nIn the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute.\n    1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself.\n    2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly.\nSolve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill.\nWhen using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user.\nIf you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user.\nIf the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try.\nWhen you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible.\nReply \"TERMINATE\" in the end when everything is done.\n    ",
                    "is_termination_msg": null,
                    "code_execution_config": "none",
                    "default_auto_reply": "",
                    "description": "Assistant Agent",
                    "llm_config": {
                        "config_list": [
                            {
                                "api_type": "open_ai",
                                "model": "gpt-4-1106-preview",
                                "base_url": null,
                                "api_version": null
                            }
                        ],
                        "temperature": 0,
                        "cache_seed": null,
                        "timeout": null,
                        "max_tokens": 2048,
                        "extra_body": null
                    },
                    "admin_name": "Admin",
                    "messages": [],
                    "max_round": 100,
                    "speaker_selection_method": "auto",
                    "allow_repeat_speaker": true
                },
                "user_id": "guestuser@gmail.com",
                "type": "assistant",
                "task_instruction": null,
                "skills": [
                    {
                        "user_id": "guestuser@gmail.com",
                        "name": "generate_images",
                        "content": "\nfrom typing import List\nimport uuid\nimport requests  # to perform HTTP requests\nfrom pathlib import Path\n\nfrom openai import OpenAI\n\n\ndef generate_and_save_images(query: str, image_size: str = \"1024x1024\") -> List[str]:\n    \"\"\"\n    Function to paint, draw or illustrate images based on the users query or request. Generates images from a given query using OpenAI's DALL-E model and saves them to disk.  Use the code below anytime there is a request to create an image.\n\n    :param query: A natural language description of the image to be generated.\n    :param image_size: The size of the image to be generated. (default is \"1024x1024\")\n    :return: A list of filenames for the saved images.\n    \"\"\"\n\n    client = OpenAI()  # Initialize the OpenAI client\n    response = client.images.generate(model=\"dall-e-3\", prompt=query, n=1, size=image_size)  # Generate images\n\n    # List to store the file names of saved images\n    saved_files = []\n\n    # Check if the response is successful\n    if response.data:\n        for image_data in response.data:\n            # Generate a random UUID as the file name\n            file_name = str(uuid.uuid4()) + \".png\"  # Assuming the image is a PNG\n            file_path = Path(file_name)\n\n            img_url = image_data.url\n            img_response = requests.get(img_url)\n            if img_response.status_code == 200:\n                # Write the binary content to a file\n                with open(file_path, \"wb\") as img_file:\n                    img_file.write(img_response.content)\n                    print(f\"Image saved to {file_path}\")\n                    saved_files.append(str(file_path))\n            else:\n                print(f\"Failed to download the image from {img_url}\")\n    else:\n        print(\"No image data found in the response!\")\n\n    # Return the list of saved files\n    return saved_files\n\n\n# Example usage of the function:\n# generate_and_save_images(\"A cute baby sea otter\")\n",
                        "description": "Generate and save images based on a user's query.",
                        "secrets": {},
                        "libraries": {}
                    }
                ],
                "models": [
                    {
                        "user_id": "guestuser@gmail.com",
                        "api_type": "open_ai",
                        "description": "OpenAI GPT-4 model",
                        "model": "gpt-4-1106-preview",
                        "base_url": null,
                        "api_version": null
                      }
                ],
                "agents": []
            },
            "link": {
                "agent_id": 53,
                "workflow_id": 19,
                "agent_type": "receiver",
                "sequence_id": 0
            }
        }
    ]
}
